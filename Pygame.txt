Pygame 
	Helps you create a Window
	Helps you render images
	Plays sounds
	Get player input. (Mouse position, keyboard inputs)
	Other gamedev tools like collisions, creating text, timers, etc.
		For gravity detection, support for 3d objects, graphical user interface, etc.,
		you would use Unreal, Unity, Godot, etc.

Benefits
	Most of the time pygame is not used for real game development, pygame is great to learn how to code or
	to create systems yourself. If you use Unreal, etc. you have all done for you, you dont learn programing,
	but if you develop all of this in pygame yourself you become a much better programmer.
	Later on if you have more experience in programming you can very easily change to other engines and 
	actually make professional games.

Create Screen
	screen = pygame.display.set_mode((width, height))
Check for inputs
	pygame.event.get()
		This method gives us every event (input).
	for event in pygame.event.get()
		We should loop throught them with a for loop.
Closing pygame
	Best way is to use the exit method sys module, this closes any kind of code once you call it.
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()
Give title
	pygame.display.set_caption("Title")
Define Framerate
	Define the clock:
		clock = pygame.time.Clock()
	Tick the clock. Inside the "while True:" loop...
		clock.tick(60)
Display Surface
	The game Window. Anything displayed goes here. 
Surfaces
	A single image, something imported, rendered text or a plain color.
	Needs to be put on display surface to be visible.
		test_surface = pygame.Surface((width, height))
	Transform Surfaces
		Scale, rotate , flip, etc a surface.
		Method 1
			player_stand_scaled = pygame.transform.scale(surface=player_stand, (200,200))
		Method 2
			player_stand = pygame.transform.scale2x(surface=player_stand)
		Method 3
			player_stand = pygame.transform.rotozoom(surface=player_stand, angle=0, scale=2)
Blit - Block Image Transfer (Put surface on another surface)
	screen.blit(surface=, dest=(positionX, positionY))
	test_surface.fill("Red")
Import Image
	test_surface = pygame.image.load("path")
	sky_surface = pygame.image.load("Assets/graphics/Sky.png")
Convert Images
	Add .convert() after importing the image.
	Or, .convert_alpha() so the alpha values dont make the image looks weird.
		snail_surface = pygame.image.load('Assets/graphics/snail/snail1.png').convert()
	Pygame works faster this way.
Text
	To create text you have to first create an image of the text, and 
	then place it as a surface.
		text_font = pygame.font.Font(font_type, font_size)
		text_surface = text_font.render('Text', False, 'green')
Rectangles
	Core functions:
		Help you place the surface much more efficiently and precisely.
		Detect Collisions.
		Draw.(pygame.draw)
	Surfaces just let you place images using the top left corner of the image.
	Rectangles help you place the image using other points of reference.
		The image information if placed on the surface.
		The position information is placed in the rectangle.
			Basically Splitting the Image into two variables.
	Example:
		player_surf = pygame.image.load('Assets/graphics/player/player_walk_1.png').convert_alpha()
		player_rect = player_surf.get_rect(midbottom = (80, 200))
	Move a rectangle:
		player_rect.left += 1
	Printing the position of a specific point of a rectangle:
		print(player_rect.left)
Collisions
	rect1.colliderect(rect2)
	Returns 0 if there's no collision, and 1 if there's a collision.
	Example:
		if player_rect.colliderect(snail_rect):
        		print("Collision")
	Example 2:
		game_active = collisions(player_rect, obstacle_rect_list)
		def collisions(player, obstacles):
    			if obstacles:
        			for obstacle_rect in obstacles:
            				if player.colliderect(obstacle_rect): 
                			return False
    			return True
	Collide Point
		Checks if a specific point colides with a rectangle.
		rect1.collidepoint((x,y))
	Example:
		## if the player rectangle collides with the snail rectangle print collision
		# if player_rect.colliderect(snail_rect):
		#     print("Collision")
Collision of Sprites
	spritecollide(sprite, group, dokill)
		returns a list with all the colliding sprites
	pygame.sprite.spritecollide(sprite=, group=, bool)
		access sprite in a GroupSingle using ".sprite". 
		if the boolean is set to True the sprite is deleted in collision, if False it's not deleted.
Mouse Position
	There are two ways of getting the mouse position. 
		1. pygame.mouse: target the mouse
			Gives the position or what buttons have been pressed.
			        if event.type == pygame.MOUSEMOTION:
			            # print(event.pos)
			            if player_rect.collidepoint(event.pos):
			                print("collision")
		2. event loop: check the events that check the mouse position.
	mouse_pos = pygame.mouse.get_pos()
		Examples:
			# mouse_pos = pygame.mouse.get_pos()
			# if player_rect.collidepoint((mouse_pos)):
			#     print(pygame.mouse.get_pressed())
Event Loop
	Examples
		# if event.type == pygame.MOUSEBUTTONDOWN:
		#     print("mouse button down")
		# if event.type == pygame.MOUSEBUTTONUP:
		#     print("mouse button up")
Colors
	RGB:		(red, gree, blue)	0 to 255
	Hexadecimal:	#rrggbb 		00 to ff
Keyboard Input
	Method 1:
		keys = pygame.key.get_pressed()
		if keys[pygame.K_SPACE]
			print('jump')
	Method 2 (event loop):
        	if event.type == pygame.KEYDOWN:
        	    print("key down")
        	if event.type == pygame.KEYUP:
	            print("key up")
Time
	pygame.time.get_ticks()
Timers
	Are used to tell pygame to trigger a certain event at an interval of time.
	obstacle_timer = pygame.USEREVENT + 1
	pygame.time.set_timer(obstacle_timer, 1500)
Sprite Class
	A class that contains a surface and a rectangle.
		It can be drawn and updated very easily.
	Drawing Sprites
		Put sprites on a Group.
		The Group can do 2 different things:
			- Draw all of the sprites.
			- Update the sprites.
	Kinds of Groups
		- Group: In a regular group of sprites, any individual sprite can't be accessed.
		- GroupSingle: A group for a single sprite. To access a sprite you can use ".sprite"
		Example
			# Creates a Group, that contains a sprite, that contains everything on the Player class.
			class Player(pygame.sprite.Sprite):
			    def __init__(self, *groups: AbstractGroup) -> None:
			        super().__init__(*groups)
			        self.image = pygame.image.load('Assets/graphics/player/player_walk_1.png').convert_alpha()
			        self.rect = self.image.get_rect(midbottom = (200, 250))
			player = pygame.sprite.GroupSingle() 	# creates a groupSingle that contains a sprite, the sprite can be accessed as player.sprite
			player.add(Player())			
			player.draw(surface=)
			player.update()
Adding Sound
	self.jump_sound = pygame.mixer.Sound('Assets/audio/jump.mp3')
	self.jump_sound.set_volume(0.025)
	self.jump_sound.play()
	To loop:
		bg_music.play(loops=-1) # to loop it indefinitely



















